{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/Title/title.module.scss","components/Title/Title.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["module","exports","Title","title","className","s","ContactForm","state","name","number","handleInputChange","currentTarget","value","setState","handleBtnSubmit","e","preventDefault","props","onSubmit","reset","this","form","autoComplete","label","autoFocus","type","onChange","input","pattern","required","btn","Component","Filter","ContactList","onDeleteContact","visibleContacts","list","map","id","item","box","onClick","App","contacts","filter","addContact","contact","uuidv4","some","toLowerCase","alert","prevState","handleDeleteContact","handleChangeFilter","includes","JSON","parse","localStorage","getItem","prevProps","console","log","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1b4be70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2BAZs\",\"label\":\"ContactForm_label__3KbPM\",\"input\":\"ContactForm_input__3DUyh\",\"number\":\"ContactForm_number__2xeoy\",\"btn\":\"ContactForm_btn__3NU7B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__25oVw\",\"item\":\"ContactList_item__16Nky\",\"box\":\"ContactList_box__1yWqK\",\"name\":\"ContactList_name__dPQ__\",\"number\":\"ContactList_number__2oEiD\",\"btn\":\"ContactList_btn__3FDrj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__6obZO\",\"input\":\"Filter_input__Yp_tW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"title_title__2Lph4\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './title.module.scss';\n\nconst Title = ({ title }) => <h2 className={s.title}>{title}</h2>;\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import React, { Component } from 'react';\nimport s from './ContactForm.module.scss';\n\nclass ContactForm extends Component {\n  // в форме стейт нужен только при сабмите, поэтому храним в компоненте формы, а при сабмите отдаем на верх\n  state = {\n    name: '',\n    number: '',\n  };\n\n  // для всех инпутов ввод данных\n  handleInputChange = ({ currentTarget: { name, value } }) => {\n    // handleInputChange = e => {\n\n    // паттерн для инпутов у которых есть name and value, подходит для радиокнопок, но не чекбоксов\n    // const { name, value } = e.currentTarget;\n\n    // вычисляемые свойства объектов\n    this.setState({ [name]: value });\n  };\n\n  handleBtnSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n    // e.currentTarget.reset(); //получить ссылку на форму и очистить методом от реакта\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  // проблема обновления состояния - всегда должны быть новое после рендера, а не мутировать по ссылке старое\n  // проверка между рендерами равны ли эти значения/на имутабеольность\n  // componentDidUpdate(prevProps, prevState) {\n  //   console.log(prevState.name === this.state.name);\n  // }\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form\n        onSubmit={this.handleBtnSubmit}\n        className={s.form}\n        autoComplete=\"off\"\n      >\n        <label className={s.label}>\n          Name\n          <input\n            autoFocus\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleInputChange}\n            className={s.input}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={s.label}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleInputChange}\n            className={s.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className={s.btn}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input\n      type=\"text\"\n      name=\"filter\"\n      // как искать и по номеру?\n      value={value}\n      onChange={onChange}\n      className={s.input}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.scss';\n\n// со свойства props деструктуризирую свойство contacts\nconst ContactList = ({ onDeleteContact, visibleContacts }) => (\n  <ul className={s.list}>\n    {visibleContacts().map(({ id, name, number }) => (\n      <li key={id} className={s.item}>\n        <div className={s.box}>\n          <p className={s.name}>{name}:</p>\n          <p className={s.number}>{number}</p>\n          <button className={s.btn} onClick={() => onDeleteContact(id)}>\n            Delete\n          </button>\n        </div>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  visibleContacts: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Title from './components/Title/Title';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport filterContacts from './utils/filter-contact';\nimport ContactList from './components/ContactList/ContactList';\n\nimport './App.scss';\n\n// import classNames from 'classnames';\n// удобно для составления динамических классов в компоненте\n// classNames(бaзовые классы -'a', 'b', {\n// динамические добавить класс, те что зависят от уловия 'c': true / false})\n\nclass App extends Component {\n  // стейт нужен каждый раз, поэтому храним в родителе\n  state = {\n    // contacts: [\n    //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    // ],\n    contacts: [],\n    filter: '',\n  };\n\n  // вызывается один/первый раз после монтирования в DOM\n  // забрать, зафетчить с бекенда и засеить начальный стейт от этих данных\n  componentDidMount() {\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\n\n    if (contacts) {\n      this.setState({ contacts: contacts });\n    }\n\n    // this.setState({ contacts: contacts ?? this.state.contacts });\n  }\n\n  addContact = ({ name, number }) => {\n    // addContact = (contact) => {\n\n    const { contacts } = this.state;\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase())\n      ? alert(`${name} is already in contacts.`)\n      : //   alert(`${contact.name} is already in contacts.`);\n        this.setState(prevState => ({\n          contacts: [...prevState.contacts, contact],\n          // contacts: [...prevState.contacts,  id: uuidv4(), ...contact],\n        }));\n  };\n\n  handleDeleteContact = id => {\n    this.setState({\n      contacts: this.state.contacts.filter(contact => contact.id !== id),\n    });\n  };\n\n  handleChangeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n    // this.setState({ filter: e.target.value });\n  };\n\n  // делает видимым тот контакт, который соответствует тексту поиска в инпуте\n  visibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    // \"qweqwe\".includes(\" \")//когда пустой инпут что бы возвращало не весь массив сонтактов, а было пусто. а когда идет запрос, что бы возвращало по запросу нужные отфильтрованные контакты\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const {\n      addContact,\n      handleChangeFilter,\n      handleDeleteContact,\n      visibleContacts,\n    } = this;\n    // const visibleContacts = this.getVisibleContact();\n\n    return (\n      <div className=\"container\">\n        <h1 className=\"visually_hidden\">Phonebook</h1>\n\n        <Title title=\"Phonebook\" />\n        <ContactForm onSubmit={addContact} />\n\n        <Title title=\"Contacts\" />\n        <Filter value={filter} onChange={handleChangeFilter} />\n        <ContactList\n          visibleContacts={visibleContacts}\n          onDeleteContact={handleDeleteContact}\n        />\n      </div>\n    );\n  }\n\n  // вызывается каждый раз после обновления компонента\n  // сделать что-то после обновления\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      console.log('Обновилось поле contacts, записываю contacts в хранилище');\n\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n}\n\nexport default App;\n// ---------------------------------------------------\n// использовать именованные импорты и экспорты\n// import {Button} export {Button}\n\n// не нужно распылять пропсы\n\n// ключи должны быть стабильными, те не изменяться между разными рендерами\n// для ключей нельзя использовать uuid, потому что между разными рендерами key будет каждый раз новый. а для id объектов можно что бы оставить обеъкт один раз с этим айдишником\n\n// если коллекция неизменна, то можно использрвать индекс для ключей(напр при переборе)\n\n// библиотека для валидации форм Formik\n\n// коллбек - функция отложенного вызова, передать ссылку на функцию\n// onClick(this.setState(index)) - при клике произойдет результат выполнения/вызова этой функции(undefined), но не вызовется сама функция! не коллбек.\n// onClick(() => {return this.setState(index)}) - ссылка на функцию, не вызывается. вызовется только тогда, когда по кнопке кликнут! коллбек.\n\n// -save сохраняет в dep\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}